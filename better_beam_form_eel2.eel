desc: beamforming

slider1:160<1,500,0.1>distance between microphones (mm)
slider2:0<-90,90,0.1>Angle (L=-90:C=0:R=90)
slider3:0<-10,10,0.1>Strength at low freq
slider3:0<-10,10,0.1>Strength at high freq

@init
slider1=160;
slider2=0;
slider3=0;
slider4=0;

fftsize = 4096;
MAXDELAY = 2048;
bufpos = idx = 0;
stftIndexLeft = 2;
stftIndexRight = 50;
memreq = stftCheckMemoryRequirement(stftIndexLeft, fftsize, 4, 2);
memreq = stftCheckMemoryRequirement(stftIndexRight, fftsize, 4, 2);
stftStructLeft = 120;
stftStructRight = stftStructLeft + memreq;
requiredSamples = stftInit(stftIndexLeft, stftStructLeft);
requiredSamples = stftInit(stftIndexRight, stftStructRight);
inBufLeft = stftStructRight + memreq + 10; // Pointer to memory
outBufLeft = inBufLeft + fftsize + 10; // Pointer to memory plus safe zone
inBufRight = outBufLeft + fftsize + 10; // ...
outBufRight = inBufRight + fftsize + 10; // ...
delay_L = outBufRight + fftsize + 10;
delay_R = delay_L + MAXDELAY;


mm=slider1;
angle=slider2;
strength_l=slider3;
strength_h=slider4;
// recpirocal of speed of sound is approximately 343 m/s or 343000 mm/s
delay = 0|max(1, 0.5+min(srate/343000*mm, MAXDELAY));
cval = cos(angle*$pi/180);
sval = sin(abs(angle)*$pi/180);

@sample
L = delay_L[sample_index];
R = delay_R[sample_index];
C = spl0 + spl1;
s_Signal = C;
s_Noise = spl0 - spl1;
angle < 0 ?
(
  s_Signal -= spl0*sval;
  s_Noise -= (spl0 - L)*sval;
) : angle > 0 ?
(
  s_Signal -= spl1*sval;
  s_Noise -= (R - spl1)*sval;
);

delay_L[sample_index] = spl0;
delay_R[sample_index] = spl1;

sample_index += 1;
sample_index %= delay;

inBufLeft[bufpos] = s_Signal;
spl0 = outBufLeft[bufpos];
inBufRight[bufpos] = s_Noise;
spl1 = outBufRight[bufpos];
bufpos += 1;
bufpos >= requiredSamples ?
(
  error1 = stftForward(inBufLeft, stftIndexLeft, stftStructLeft, 1);
  error2 = stftForward(inBufRight, stftIndexRight, stftStructRight, 1);
  idx=0;

  loop(error1 / 2,
  s_norm = sqr(inBufLeft[idx]) + sqr(inBufLeft[idx+1]);
  n_norm = sqr(inBufRight[idx]) + sqr(inBufRight[idx+1]);
  frac = idx / (error1-1);
  strength = strength_l + (strength_h - strength_l) * frac;
  ksq = exp(strength);
  w = s_norm / (s_norm + ksq * n_norm);
  inBufLeft[idx] *= w;
  inBufLeft[idx + 1] *= w;
  inBufRight[idx] = inBufLeft[idx];
  inBufRight[idx + 1] = inBufLeft[idx + 1];
  idx+=2);
  error = stftBackward(inBufLeft, stftIndexLeft, stftStructLeft, 1);
  error = stftBackward(inBufRight, stftIndexRight, stftStructRight, 1);
  idx = 0;
  loop(requiredSamples,
  outBufLeft[idx] = inBufLeft[idx];
  outBufRight[idx] = inBufRight[idx];
  idx+=1);
  bufpos = 0;
);
