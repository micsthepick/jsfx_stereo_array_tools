desc:Better Beam former (for microphone arrays)
// Copyright (C) 2022 Michael Pannekoek
// License: MIT

slider1:80<1,500,0.1>distance between microphones (mm)
slider2:0<-90,90,0.1>Angle (L=-90:C=0:R=90)
//slider3:delay=1<0,2000>Calculated Delay (samples)
slider3:0<-3,3,0.1>Strength

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

//@import cookdsp.jsfx-inc

// memalloc.jsfx-inc

/////////////////////////////////////////////////////////////////
// Copyright (c) - 2014 - Olivier Belanger                     //
// Permission to use, copy, modify, and/or distribute this     //
// software for any purpose with or without fee is hereby      //
// granted, provided that the above copyright notice and this  //
// permission notice appear in all copies. CookDSP IS PROVIDED //
// "AS IS", WITHOUT WARRANTY OF ANY KIND FROM THE AUTHOR.      //
/////////////////////////////////////////////////////////////////

//@init


function memalloc(size)
(
    __memory_index = __memory_next + 8;
    __memory_next = __memory_index + size;
    memset(__memory_index, 0.0, size);
    __memory_index;
);

function memalloc(size, noreinit)
(
    noreinit == 0 ? (
        __memory_index = __memory_next + 8;
        __memory_next = __memory_index + size;
        memset(__memory_index, 0.0, size);
    ) : (
        __memory_index = __memory_next + 8;
        __memory_next = __memory_index + size;
    );
    __memory_index;
);

// buffer.jsfx-inc
function buffer(size)
(
    this.buf = memalloc(size);
    this.size = size;
    this.hsize = this.size * 0.5;
    this.curval = 0.0;
    this.buf;
);

function buffer_write(pos, signal)
(
    pos >= 0 && pos < this.size ? (
        this.buf[pos] = signal;
        this.buf[this.size] = this.buf[0];
        this.buf[this.size+1] = this.buf[1];
        this.buf[-1] = this.buf[this.size-1];
    );
);

function buffer_read(pos)
(
    pos >= 0 && pos < this.size ? (
        this.curval = this.buf[pos];
    );
    this.curval;
);

function buffer_fread(pos)
(
    this.curval = this.buf[pos];
    this.curval;
);

function buffer_nread(pos)
(
    this.buffer_read(pos * this.size);
);

function buffer_fnread(pos)
(
    this.buffer_fread(pos * this.size);
);

function buffer_read2(pos)
(
    pos >= 0 && pos < this.size ? (
        i_ = floor(pos);
        this.curval = this.buf[i_] + (this.buf[i_+1] - this.buf[i_]) * (pos - i_);
    );
    this.curval;
);

function buffer_fread2(pos)
(
    i_ = floor(pos);
    this.curval = this.buf[i_] + (this.buf[i_+1] - this.buf[i_]) * (pos - i_);
    this.curval;
);

function buffer_nread2(pos)
(
    this.buffer_read2(pos * this.size);
);

function buffer_fnread2(pos)
(
    this.buffer_fread2(pos * this.size);
);

function buffer_read3(pos)
(
    pos >= 0 && pos < this.size ? (
        i_ = floor(pos);
        f_ = pos - i_;
        x0_ = this.buf[i_-1]; x1_ = this.buf[i_]; 
        x2_ = this.buf[i_+1]; x3_ = this.buf[i_+2];
        a3_ = f_ * f_; a3_ -= 1.0; a3_ *= (1.0 / 6.0);
        a2_ = (f_ + 1.0) * 0.5; a0_ = a2_ - 1.0;
        a1_ = a3_ * 3.0; a2_ -= a1_; a0_ -= a3_; a1_ -= f_;
        a0_ *= f_; a1_ *= f_; a2_ *= f_; a3_ *= f_; a1_ += 1.0;
        this.curval = a0_*x0_ + a1_*x1_ + a2_*x2_ + a3_*x3_;
    );
    this.curval;
);

function buffer_fread3(pos)
(
    i_ = floor(pos);
    f_ = pos - i_;
    x0_ = this.buf[i_-1]; x1_ = this.buf[i_]; 
    x2_ = this.buf[i_+1]; x3_ = this.buf[i_+2];
    a3_ = f_ * f_; a3_ -= 1.0; a3_ *= (1.0 / 6.0);
    a2_ = (f_ + 1.0) * 0.5; a0_ = a2_ - 1.0;
    a1_ = a3_ * 3.0; a2_ -= a1_; a0_ -= a3_; a1_ -= f_;
    a0_ *= f_; a1_ *= f_; a2_ *= f_; a3_ *= f_; a1_ += 1.0;
    this.curval = a0_*x0_ + a1_*x1_ + a2_*x2_ + a3_*x3_;
    this.curval;
);

function buffer_nread3(pos)
(
    this.buffer_read3(pos * this.size);
);

function buffer_fnread3(pos)
(
    this.buffer_fread3(pos * this.size);
);

function buffer_lookup(pos)
(
    pos *= (this.hsize - 1);
    pos += this.hsize;
    this.buffer_fread(pos);
);

function buffer_lookup2(pos)
(
    pos *= (this.hsize - 1);
    pos += this.hsize;
    this.buffer_fread2(pos);
);

function buffer_lookup3(pos)
(
    pos *= (this.hsize - 2);
    pos += this.hsize;
    this.buffer_fread3(pos);
);

function buffer_window(which)
(
    // defaults to hanning
    which < 0 || which > 8 ? which = 1;
    which == 0 ? ( // hamming
        arg_ = 2.0 * $pi / (this.size-1);
        i_ = 0;
        loop(this.size,
            this.buf[i_] = 0.54 - 0.46 * cos(arg_ * i_);
            i_ += 1;
        );
    ) :
    which == 1 ? ( // hanning
        arg_ = 2.0 * $pi / (this.size-1);
        i_ = 0;
        loop(this.size,
            this.buf[i_] = 0.5 - 0.5 * cos(arg_ * i_);
            i_ += 1;
        );
    ) :
    which == 2 ? ( // bartlett
        arg_ = 2.0 / (this.size-1);
        hsize_ = floor((this.size-1)/2);
        i_ = 0;
        loop(hsize_,
            this.buf[i_] = i_ * arg_;
            i_ += 1;
        );
        loop(this.size - hsize_,
            this.buf[i_] = 2.0 - i_ * arg_;
            i_ += 1;
        );
    ) :
    which == 3 ? ( // blackman
        arg_ = 2.0 * $pi / (this.size-1);
        i_ = 0;
        loop(this.size,
            this.buf[i_] = 0.42323 - 0.49755 * cos(arg_*i_) + 0.07922 * cos(2*arg_*i_);
            i_ += 1;
        );
    ) :
    which == 4 ? ( // blackman_harris_4
        arg_ = 2.0 * $pi / (this.size-1);
        i_ = 0;
        loop(this.size,
            this.buf[i_] = 0.35875 - 0.48829 * cos(arg_*i_) + 0.14128 * cos(2*arg_*i_) - 0.01168 * cos(3*arg_*i_);
            i_ += 1;
        );
    ) :
    which == 5 ? ( // blackman_harris_7
        arg_ = 2.0 * $pi / (this.size-1);
        i_ = 0;
        loop(this.size,
            this.buf[i_] = 0.2712203606 - 0.4334446123 * cos(arg_*i_) + 0.21800412 * cos(2*arg_*i_) - 0.0657853433 * cos(3*arg_*i_) + 0.0107618673 * cos(4*arg_*i_) - 0.0007700127 * cos(5*arg_*i_) + 0.00001368088 * cos(6*arg_*i_);
            i_ += 1;
        );
    ) :
    which == 6 ? ( // tuckey 50%
        i_ = 0;
        step_ = floor(0.5 * this.size / 2);
        loop(step_,
            this.buf[i_] = 0.5 * (1 + cos($pi * (2 * i_ / (0.5 * this.size) - 1)));
            i_ += 1;
        );
        step_ = this.size * (1 - 0.5 / 2) - step_;
        loop(step_,
            this.buf[i_] = 1.0;
            i_ += 1;
        );
        step_ = this.size - step_;
        loop(step_,
            this.buf[i_] = 0.5 * (1 + cos($pi * (2 * i_ / (0.5 * this.size) - 2 / 0.5 + 1)));
            i_ += 1;
        );
    ) :
    which == 7 ? ( // halfsine
        arg_ = $pi / (this.size-1);
        i_ = 0;
        loop(this.size,
            this.buf[i_] = sin(arg_ * i_);
            i_ += 1;
        );
    ) :
    which == 8 ? ( // parabolic
        size1_ = this.size - 1;
        rdur_ = 1 / size1_;
        rdur2_ = rdur_ * rdur_;
        level_ = 0;
        slope_ = 4 * (rdur_ - rdur2_);
        curve_ = -8 * rdur2_;

        i_ = 0;
        loop(size1_,
            this.buf[i_] = level_;
            level_ += slope_;
            slope_ += curve_;
            i_ += 1;
        );
        this.buf[size1_] = this.buf[0];
    );
    this.buf[this.size] = this.buf[0];
    this.buf[this.size+1] = this.buf[1];
    this.buf[-1] = this.buf[this.size-1];
);

// fftobjects.jsfx-inc

// Sorensen in-place split-radix FFT for real values.
//
// data before process {array of doubles}:  
// *re(0), re(1), re(2), ..., re(size-1)*
//
// data after process {array of doubles}:  
// *re(0), re(1), re(2), ..., re(size/2), im(size/2-1), ..., im(1)*
//
// Output data is normalized by array length.
//
// Source:  
// Sorensen et al: *Real-Valued Fast Fourier Transform Algorithms*, 
// IEEE Trans. ASSP, ASSP-35, No. 6, June 1987
//
// Implementation in C by Toth Laszlo, 97.05.29
// 
// Transposed to jsfx language by Olivier Belanger 2014.06.11
//
// Original file can be found on musicdsp.org :
// http://www.musicdsp.org/archive.php?classid=2#79
///////////////////////////////////////////////////////////////////
function realfft(data n twiddle)
(
    isqrt2 = 1.0 / 1.4142135623730951; // 1/sqrt(2.0)
    n4 = n - 1;
    nn8 = n >> 3;

    // data shuffling
    i = j = 0;
    n2 = n/2;
    while (i < n4) (
        i < j ? (
            t1 = data[j];
            data[j] = data[i];
            data[i] = t1;
        );
        k = n2;
        while (k <= j) (
            j -= k;
            k = k >> 1;
        );
        j += k;
        i += 1;
    );
  
  // length two butterflies
  i0 = 0;
  id = 4;
    while (
        while (i0 < n4) (
            i1 = i0 + 1;
            t1 = data[i0];
            data[i0] = t1 + data[i1];
            data[i1] = t1 - data[i1];
            i0 += id;
        );
        id = id << 1;
        i0 = id - 2;
        id = id << 1;
        i0 < n4;
    );

    // L shaped butterflies
    n2 = 2;
    k = n;
    while (k > 2) (
        n2 = n2 << 1; // power of two from 4 to n
        n4 = n2 >> 2;
        n8 = n2 >> 3;
        pas = n / n2;
        i1 = 0;
        id = n2 << 1;
        while (
            while (i1 < n) (
                i2 = i1 + n4;
                i3 = i2 + n4;
                i4 = i3 + n4;
                t1 = data[i4] + data[i3];
                data[i4] -= data[i3];
                data[i3] = data[i1] - t1;
                data[i1] += t1;
                n4 != 1 ? (
                    i0 = i1 + n8;
                    i2 += n8;
                    i3 += n8;
                    i4 += n8;
                    t1 = (data[i3] + data[i4]) * isqrt2;
                    t2 = (data[i3] - data[i4]) * isqrt2;
                    data[i4] = data[i2] - t1;
                    data[i3] = -data[i2] - t1;
                    data[i2] = data[i0] - t2;
                    data[i0] += t2;
                );
                i1 += id;
            );
            id = id << 1;
            i1 = id - n2;
            id = id << 1;
            i1 < n;
        );
        j = 2;
        while (j <= n8) (
            pos = (j-1) * pas;
            cc1 = twiddle[pos];
            ss1 = twiddle[nn8+pos];
            cc3 = twiddle[nn8*2+pos];
            ss3 = twiddle[nn8*3+pos];
            i = 0;
            id = n2 << 1;
            while (
                while (i < n) (
                    i1 = i + j - 1;
                    i2 = i1 + n4;
                    i3 = i2 + n4;
                    i4 = i3 + n4;
                    i5 = i + n4 - j + 1;
                    i6 = i5 + n4;
                    i7 = i6 + n4;
                    i8 = i7 + n4;
                    t1 = data[i3] * cc1 + data[i7] * ss1;
                    t2 = data[i7] * cc1 - data[i3] * ss1;
                    t3 = data[i4] * cc3 + data[i8] * ss3;
                    t4 = data[i8] * cc3 - data[i4] * ss3;
                    t5 = t1 + t3;
                    t6 = t2 + t4;
                    t3 = t1 - t3;
                    t4 = t2 - t4;
                    t2 = data[i6] + t6;
                    data[i3] = t6 - data[i6];
                    data[i8] = t2;
                    t2 = data[i2] - t3;
                    data[i7] = -data[i2] - t3;
                    data[i4] = t2;
                    t1 = data[i1] + t5;
                    data[i6] = data[i1] - t5;
                    data[i1] = t1;
                    t1 = data[i5] + t4;
                    data[i5] -= t4;
                    data[i2] = t1;
                    i += id;
                );
                id = id << 1;
                i = id - n2;
                id = id << 1;
                i < n;
            );
            j += 1;
        );
        k = k >> 1;
    );

    // division with array length
    norm = 1 / n;
    i = 0;
    loop(n, 
        data[i] *= norm;
        i += 1;
    );
);

// Sorensen in-place inverse split-radix FFT for real values.
//
// data before process {array of doubles}:  
// *re(0), re(1), re(2), ..., re(size/2), im(size/2-1), ..., im(1)*
//
// data after process {array of doubles}:  
// *re(0), re(1), re(2), ..., re(size-1)*
//
// Processed data is NOT normalized by array length.
//
// Source:  
// Sorensen et al: *Real-Valued Fast Fourier Transform Algorithms*, 
// IEEE Trans. ASSP, ASSP-35, No. 6, June 1987
//
// Implementation in C by Toth Laszlo, 97.05.29
//
// Transposed to jsfx language by Olivier Belanger 2014.06.11
//
// Original file can be found on musicdsp.org :
// http://www.musicdsp.org/archive.php?classid=2#79
///////////////////////////////////////////////////////////////////
function irealfft(data size twiddle)
( 
    isqrt2 = 1.0 / 1.4142135623730951; // 1/sqrt(2.0)
    n = size;
    nn8 = n >> 3;
    n1 = n - 1;
    n2 = n << 1;
    k = n;
    while (k > 2) (
        id = n2;
        n2 = n2 >> 1;
        n4 = n2 >> 2;
        n8 = n2 >> 3;
        pas = n / n2;
        i1 = 0;
        while (
            while (i1 < n) (
                i2 = i1 + n4;
                i3 = i2 + n4;
                i4 = i3 + n4;
                t1 = data[i1] - data[i3];
                data[i1] += data[i3];
                data[i2] *= 2;
                data[i3] = t1 - 2 * data[i4];
                data[i4] = t1 + 2 * data[i4];
                n4 != 1 ? (
                    i0 = i1 + n8;
                    i2 += n8;
                    i3 += n8;
                    i4 += n8;
                    t1 = (data[i2] - data[i0]) * isqrt2;
                    t2 = (data[i4] + data[i3]) * isqrt2;
                    data[i0] += data[i2];
                    data[i2] = data[i4] - data[i3];
                    data[i3] = 2 * (-t2 - t1);
                    data[i4] = 2 * (-t2 + t1);
                );
                i1 += id;
            );
            id = id << 1;
            i1 = id - n2;
            id = id << 1;
            i1 < n1
        );
        j = 2;
        while (j <= n8) (
            pos = (j-1) * pas;
            cc1 = twiddle[pos];
            ss1 = twiddle[nn8+pos];
            cc3 = twiddle[nn8*2+pos];
            ss3 = twiddle[nn8*3+pos];
            i = 0;
            id = n2 << 1;
            while (
                while (i < n) (
                    i1 = i + j - 1;
                    i2 = i1 + n4;
                    i3 = i2 + n4;
                    i4 = i3 + n4;
                    i5 = i + n4 - j + 1;
                    i6 = i5 + n4;
                    i7 = i6 + n4;
                    i8 = i7 + n4;
                    t1 = data[i1] - data[i6];
                    data[i1] += data[i6];
                    t2 = data[i5] - data[i2];
                    data[i5] += data[i2];
                    t3 = data[i8] + data[i3];
                    data[i6] = data[i8] - data[i3];
                    t4 = data[i4] + data[i7];
                    data[i2] = data[i4] - data[i7];
                    t5 = t1 - t4;
                    t1 += t4;
                    t4 = t2 - t3;
                    t2 += t3;
                    data[i3] = t5 * cc1 + t4 * ss1;
                    data[i7] = -t4 * cc1 + t5 * ss1;
                    data[i4] = t1 * cc3 - t2 * ss3;
                    data[i8] = t2 * cc3 + t1 * ss3;
                    i += id;
                );
                id = id << 1;
                i = id - n2;
                id = id << 1;
                i < n1;
            );
            j += 1;
        );    
        k = k >> 1;
    );

    i0 = 0;
    id = 4;
    while (
        while (i0 < n1) (
            i1 = i0 + 1;
            t1 = data[i0];
            data[i0] = t1 + data[i1];
            data[i1] = t1 - data[i1];
            i0 += id;
        );
        id = id << 1;
        i0 = id - 2;
        id = id << 1;
        i0 < n1;
    );

    // data shuffling
    i = j = 0;
    n2 = n / 2;
    while (i < n1) (
        i < j ? (
            t1 = data[j];
            data[j] = data[i];
            data[i] = t1;
        );
        k = n2;
        while (k <= j) (
            j -= k;
            k = k >> 1;
        );
        j += k;
        i += 1;
    );
);

// private fft window generator
function _fft_generate_window(window)
(
    this.wind.buffer(this.size);
    this.wind.buffer_window(window);
    this.window = window;
);

// private twiddle generator function
function _fft_generate_twiddle()
(
    n8 = this.size >> 3;
    e = 2.0 * $pi / this.size;
    a = e;
    j = 2;
    while (j <= n8) (
        a3 = 3 * a;
        this.twiddle[j-1] = cos(a);
        this.twiddle[n8+j-1] = sin(a);
        this.twiddle[n8*2+j-1] = cos(a3);
        this.twiddle[n8*3+j-1] = sin(a3);
        a = j * e;
        j += 1;
    );
);

// private fftin initialization function
function _fftin_init(size, olaps, window)
(
    // init variables
    this.ready = 0;
    this.size = size;
    this.olaps = olaps;
    this.hsize = this.size / 2;
    this.hopsize = this.size / this.olaps;
    this.inputLatency = this.size - this.hopsize;
    this.incount = this.inputLatency;
    this.count = 0;
    this.overcount = 0;
    // init memories
    this.inbuf = memalloc(this.size);
    this.frame = memalloc(this.size);
    this.real = memalloc(this.hsize);
    this.imag = memalloc(this.hsize);
    this.twiddle = memalloc(4 * (this.size >> 3));
    this._fft_generate_window(window);
    this._fft_generate_twiddle();
);

function fftin(size olaps window)
(
    this._fftin_init(size, olaps, window);
);

function fftin(size olaps)
(
    this._fftin_init(size, olaps, 1);
);

function fftin_resize(size olaps)
(
    this._fftin_init(size, olaps, this.window);
);

function fftin_set_window(window)
(
    this._fft_generate_window(window);
);

function fftin_do(signal)
(
    this.ready = 0;
    this.count = this.incount - this.inputLatency;
    this.inbuf[this.incount] = signal;
    this.incount += 1;
    this.incount >= this.size ? (
        this.ready = 1;
        this.incount = this.inputLatency;
        mod_ = this.hopsize * this.overcount;
        k_ = 0;
        loop(this.size,
            this.frame[(k_+mod_)%this.size] = this.inbuf[k_] * this.wind.buffer_fread(k_);
            k_ += 1;
        );
        realfft(this.frame, this.size, this.twiddle);
        this.real[0] = this.frame[0]; this.imag[0] = 0.0;
        k_ = 1;
        while (k_ < this.hsize) (
            this.real[k_] = this.frame[k_]; this.imag[k_] = this.frame[this.size - k_];
            k_ += 1;
        );
        k_ = 0;
        while (k_ < this.inputLatency) (
            this.inbuf[k_] = this.inbuf[k_ + this.hopsize];
            k_ += 1;
        );
        this.overcount += 1;
        this.overcount >= this.olaps ? this.overcount = 0;
    );
);

// private fftout initialization function
function _fftout_init(size, olaps, window)
(
    // init variables
    this.size = size;
    this.olaps = olaps;
    this.ampscl = 1.0 / sqrt(olaps);
    this.hsize = this.size / 2;
    this.hopsize = this.size / this.olaps;
    this.overcount = 0;
    // init memories
    this.outbuf = memalloc(this.size);
    this.frame = memalloc(this.size);
    this.accum = memalloc(this.size + this.hopsize);
    this.twiddle = memalloc(4 * (this.size >> 3));
    this._fft_generate_window(window);
    this._fft_generate_twiddle();
);

function fftout(size olaps window)
(
    this._fftout_init(size, olaps, window);
);

function fftout(size olaps)
(
    this._fftout_init(size, olaps, 1);
);

function fftout_resize(size olaps)
(
    this._fftout_init(size, olaps, this.window);
);

function fftout_set_window(window)
(
    this._fft_generate_window(window);
);

function fftout_get_output(count) 
(
    // count is fftin.count
    this.outbuf[count];
);

// call fftout_do only when fftin.ready is true
function fftout_do(real imag)
(
    mod_ = this.hopsize * this.overcount;
    this.frame[0] = real[0]; this.frame[this.hsize] = 0.0;
    k_ = 1;
    while (k_ < this.hsize) (
        this.frame[k_] = real[k_]; this.frame[this.size - k_] = imag[k_];
        k_ += 1;
    );
    irealfft(this.frame, this.size, this.twiddle);
    k_ = 0;
    while (k_ < this.size) (
        this.accum[k_] += this.frame[(k_+mod_)%this.size] * this.ampscl * this.wind.buffer_fread(k_);
        k_ += 1;
    );
    k_ = 0;
    while (k_ < this.hopsize) (
        this.outbuf[k_] = this.accum[k_];
        k_ += 1;
    );
    k_ = 0;
    while (k_ < this.size) (
         this.accum[k_] = this.accum[k_ + this.hopsize];
        k_ += 1;
    );
    this.overcount += 1;
    this.overcount >= this.olaps ? this.overcount = 0;
);


// main code

slider1=80;
slider2=0;
slider3=0;

MAXDELAY = 2048;
FFTSIZE = 4096;
OLAPS = 4;
sample_index = 0;
FFT_Sig_in.fftin(FFTSIZE, OLAPS);
FFT_Noi_in.fftin(FFTSIZE, OLAPS);
FFT_out.fftout(FFTSIZE, OLAPS);
delay_L = memalloc(MAXDELAY);
delay_R = memalloc(MAXDELAY);
pdc_bot_ch = 0;
pdc_top_ch = 2;
pdc_delay = FFTSIZE;


//@slider

mm=slider1;
angle=slider2;
strength=slider3;
// recpirocal of speed of sound is approximately 343 m/s or 343000 mm/s
delay = 0|max(1, min(srate/343000*mm, MAXDELAY));
ksq = exp(strength);
cval = cos(angle*$pi/180);
sval = sin(abs(angle)*$pi/180);



@sample
R = spl0 - delay_L[sample_index];
L = spl1 - delay_R[sample_index];
C = spl0 + spl2;
angle < 0 ?
(
  s_Signal = C * cval + L * sval;
  s_Noise = C * sval + R
) : angle > 0 ?
(
  s_Signal = C * cval + R * sval;
  s_Noise = C * sval + L;
) : (
  s_Signal = C;
  s_Noise = L + R;
);
//s_Signal = spl0;

delay_L[sample_index] = spl1;
delay_R[sample_index] = spl2;
  
FFT_Sig_in.fftin_do(s_Signal);
FFT_Noi_in.fftin_do(s_Noise);
  
spl0 = spl1 = FFT_out.fftout_get_output(FFT_Sig_in.count);

FFT_Sig_in.ready ? (
  i = 0;
    loop(FFTSIZE/2,
    s_norm = sqr(FFT_Sig_in.real[i]) + sqr(FFT_Sig_in.imag[i]);
    n_norm = sqr(FFT_Noi_in.real[i]) + sqr(FFT_Noi_in.imag[i]);
    w = s_norm / (s_norm + ksq * n_norm);
    FFT_Sig_in.real[i] *= w;
    FFT_Sig_in.imag[i] *= w;
    i += 1;
  );
  FFT_out.fftout_do(FFT_Sig_in.real, FFT_Sig_in.imag);
);


sample_index += 1;
sample_index %= delay;


